"use strict";(self.webpackChunkjwtsmith_docs=self.webpackChunkjwtsmith_docs||[]).push([[4363],{349:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"0.1.0","label":"0.1.0","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-0.1.0","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Tutorial Intro","href":"/docs/0.1.0/intro","docId":"intro","unlisted":false},{"type":"category","label":"Tutorial - Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"installation-and-setup","href":"/docs/0.1.0/tutorial-basics/installation-and-setup","docId":"tutorial-basics/installation-and-setup","unlisted":false},{"type":"link","label":"JwtManager","href":"/docs/0.1.0/tutorial-basics/jwt-manager","docId":"tutorial-basics/jwt-manager","unlisted":false},{"type":"link","label":"Token Signing","href":"/docs/0.1.0/tutorial-basics/sign-token","docId":"tutorial-basics/sign-token","unlisted":false},{"type":"link","label":"Token Verification","href":"/docs/0.1.0/tutorial-basics/token-verification","docId":"tutorial-basics/token-verification","unlisted":false}],"href":"/docs/0.1.0/category/tutorial---basics"},{"type":"category","label":"Tutorial - Middleware","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to Middleware in JWT Smith","href":"/docs/0.1.0/tutorial-middleware/introduction","docId":"tutorial-middleware/introduction","unlisted":false},{"type":"link","label":"validateJwtCookieMiddleware","href":"/docs/0.1.0/tutorial-middleware/validate-jwt-cookie-middleware","docId":"tutorial-middleware/validate-jwt-cookie-middleware","unlisted":false},{"type":"link","label":"validateJwtHeaderMiddleware","href":"/docs/0.1.0/tutorial-middleware/validate-jwt-header-middleware","docId":"tutorial-middleware/validate-jwt-header-middleware","unlisted":false},{"type":"link","label":"roleBasedAuthenticationMiddleware","href":"/docs/0.1.0/tutorial-middleware/role-based-authentication-middleware","docId":"tutorial-middleware/role-based-authentication-middleware","unlisted":false}],"href":"/docs/0.1.0/category/tutorial---middleware"}]},"docs":{"intro":{"id":"intro","title":"Tutorial Intro","description":"Welcome to the JWT Smith tutorial! This guide will help you get started with JWT Smith, a robust and customizable JWT authentication module built on top of jsonwebtoken. Whether you\'re new to authentication or a seasoned developer, this tutorial will walk you through the core features, setup process, and real-world use cases of JWT Smith.","sidebar":"tutorialSidebar"},"tutorial-basics/installation-and-setup":{"id":"tutorial-basics/installation-and-setup","title":"installation-and-setup","description":"Jwt Smith logo","sidebar":"tutorialSidebar"},"tutorial-basics/jwt-manager":{"id":"tutorial-basics/jwt-manager","title":"JwtManager","description":"Centralized Configuration for JWT Smith","sidebar":"tutorialSidebar"},"tutorial-basics/sign-token":{"id":"tutorial-basics/sign-token","title":"Token Signing","description":"The sign method in JWT Smith is a powerful and flexible function used to create JSON Web Tokens (JWTs). With its asynchronous implementation, it allows developers to efficiently generate tokens with custom payloads, secrets, and options.","sidebar":"tutorialSidebar"},"tutorial-basics/token-verification":{"id":"tutorial-basics/token-verification","title":"Token Verification","description":"The verify method in JWT Smith is designed to validate JSON Web Tokens (JWTs) with the same flexibility and configurability as the sign method. This asynchronous function ensures secure and reliable verification of tokens, allowing developers to enforce token integrity and authenticity.","sidebar":"tutorialSidebar"},"tutorial-middleware/introduction":{"id":"tutorial-middleware/introduction","title":"Introduction to Middleware in JWT Smith","description":"JWT Smith provides built-in middleware to simplify authentication and authorization in your application. These middleware functions help verify JWTs, extract user information, and enforce role-based access control (RBAC) seamlessly.","sidebar":"tutorialSidebar"},"tutorial-middleware/role-based-authentication-middleware":{"id":"tutorial-middleware/role-based-authentication-middleware","title":"roleBasedAuthenticationMiddleware","description":"The roleBasedAuthenticationMiddleware enforces role-based access control (RBAC) for API endpoints by verifying user roles and their associated permissions before granting access.","sidebar":"tutorialSidebar"},"tutorial-middleware/validate-jwt-cookie-middleware":{"id":"tutorial-middleware/validate-jwt-cookie-middleware","title":"validateJwtCookieMiddleware","description":"The validateJwtCookieMiddleware checks for the presence of access and refresh tokens in the request cookies. If neither token is found, it throws an error. If tokens are found, it validates or refreshes them using the provided token generation handler and token storage.","sidebar":"tutorialSidebar"},"tutorial-middleware/validate-jwt-header-middleware":{"id":"tutorial-middleware/validate-jwt-header-middleware","title":"validateJwtHeaderMiddleware","description":"The validateJwtHeaderMiddleware is similar to the validateJwtCookieMiddleware but has additional configurations for handling JWTs in request headers. This middleware extracts the JWT from the specified header, validates it, and optionally refreshes it if needed.","sidebar":"tutorialSidebar"}}}}')}}]);