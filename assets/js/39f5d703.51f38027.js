"use strict";(self.webpackChunkjwtsmith_docs=self.webpackChunkjwtsmith_docs||[]).push([[9008],{6119:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tutorial-basics/sign-token","title":"Token Signing","description":"The sign method in JWT Smith is a powerful and flexible function used to create JSON Web Tokens (JWTs). With its asynchronous implementation, it allows developers to efficiently generate tokens with custom payloads, secrets, and options.","source":"@site/versioned_docs/version-0.1.0/tutorial-basics/sign-token.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/sign-token","permalink":"/docs/0.1.0/tutorial-basics/sign-token","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-0.1.0/tutorial-basics/sign-token.md","tags":[],"version":"0.1.0","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"JwtManager","permalink":"/docs/0.1.0/tutorial-basics/jwt-manager"},"next":{"title":"Token Verification","permalink":"/docs/0.1.0/tutorial-basics/token-verification"}}');var t=i(4848),r=i(8453);const o={sidebar_position:3},c="Token Signing",d={},l=[{value:"How the <code>sign</code> Method Works",id:"how-the-sign-method-works",level:2},{value:"Parameters",id:"parameters",level:3},{value:"1. <code>payload</code> (string | Buffer | object) [required]",id:"1-payload-string--buffer--object-required",level:4},{value:"2. <code>secret</code> (string | Buffer | KeyObject | { [key]: string | Buffer; passphrase: string } | PrivateKeyInput | JsonWebKeyInput) [required]",id:"2-secret-string--buffer--keyobject---key-string--buffer-passphrase-string---privatekeyinput--jsonwebkeyinput-required",level:4},{value:"3. <code>options</code> (Object) [optional]",id:"3-options-object-optional",level:4},{value:"Return Value",id:"return-value",level:3},{value:"Setting Default Signing Options",id:"setting-default-signing-options",level:2},{value:"Example: Using <code>setDefaultSignOptions</code>",id:"example-using-setdefaultsignoptions",level:3},{value:"Best Practices",id:"best-practices",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"token-signing",children:"Token Signing"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"sign"})," method in JWT Smith is a powerful and flexible function used to create JSON Web Tokens (JWTs). With its asynchronous implementation, it allows developers to efficiently generate tokens with custom payloads, secrets, and options."]}),"\n",(0,t.jsxs)(n.h2,{id:"how-the-sign-method-works",children:["How the ",(0,t.jsx)(n.code,{children:"sign"})," Method Works"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"sign"})," method accepts an object as its parameter, providing developers with complete control over token generation. Below are the properties that can be included in this object:"]}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.h4,{id:"1-payload-string--buffer--object-required",children:["1. ",(0,t.jsx)(n.code,{children:"payload"})," (string | Buffer | object) [required]"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," The data to be embedded in the JWT."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A string (",(0,t.jsx)(n.code,{children:'"user123"'}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["An object (",(0,t.jsx)(n.code,{children:'{ id: 1, role: "admin" }'}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"2-secret-string--buffer--keyobject---key-string--buffer-passphrase-string---privatekeyinput--jsonwebkeyinput-required",children:["2. ",(0,t.jsx)(n.code,{children:"secret"})," (string | Buffer | KeyObject | { [key]: string | Buffer; passphrase: string } | PrivateKeyInput | JsonWebKeyInput) [required]"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," The secret or private key used to sign the JWT."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Details:"})," The key can also be an object or a buffer."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," Secrets and keys must match the algorithm used."]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"3-options-object-optional",children:["3. ",(0,t.jsx)(n.code,{children:"options"})," (Object) [optional]"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Additional options for configuring the token."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Supported Properties:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"algorithm"}),": The signing algorithm to use (e.g., ",(0,t.jsx)(n.code,{children:"HS256"}),", ",(0,t.jsx)(n.code,{children:"RS256"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"expiresIn"}),": Specifies the expiration time of the token (e.g., ",(0,t.jsx)(n.code,{children:'"1h"'}),", ",(0,t.jsx)(n.code,{children:"3600"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"notBefore"}),": Specifies the time before which the token is invalid (e.g., ",(0,t.jsx)(n.code,{children:'"10s"'}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"audience"}),": Identifies the recipients that the token is intended for."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"subject"}),": Identifies the subject of the token."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"issuer"}),": Identifies the principal that issued the token."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"jwtid"}),": A unique identifier for the token."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"header"}),": Additional JWT header parameters."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," All options provided by the ",(0,t.jsx)(n.code,{children:"jsonwebtoken"})," library are supported."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"return-value",children:"Return Value"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"sign"})," method returns a ",(0,t.jsx)(n.code,{children:"Promise"})," that resolves to a ",(0,t.jsx)(n.code,{children:"string"})," containing the signed JWT, or ",(0,t.jsx)(n.code,{children:"undefined"})," if signing fails."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"Promise<string | undefined>\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"setting-default-signing-options",children:"Setting Default Signing Options"}),"\n",(0,t.jsxs)(n.p,{children:["JWT Smith provides the ",(0,t.jsx)(n.code,{children:"setDefaultSignOptions"})," method to define common options for signing tokens. This method accepts an object with the same properties as the ",(0,t.jsx)(n.code,{children:"options"})," parameter in the ",(0,t.jsx)(n.code,{children:"sign"})," method. Additionally, developers can use the ",(0,t.jsx)(n.code,{children:"JwtManager"})," to set up default configurations for signing tokens."]}),"\n",(0,t.jsxs)(n.h3,{id:"example-using-setdefaultsignoptions",children:["Example: Using ",(0,t.jsx)(n.code,{children:"setDefaultSignOptions"})]}),"\n",(0,t.jsxs)(n.p,{children:["By configuring default signing options, you can simplify subsequent calls to the ",(0,t.jsx)(n.code,{children:"sign"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { JwtManager, setDefaultSignOptions, sign } from 'jwt-smith';\n\nJwtManager({\n  publicKey: process.env.PUBLIC_KEY || 'your-public-key',\n  signOptions: { ... }\n});\n\n// OR Set default signing options\nsetDefaultSignOptions({\n  algorithm: 'RS256',\n  expiresIn: '1h',\n  issuer: 'my-app',\n});\n\n// Sign a token\nconst token = await sign({\n  payload: { id: 1, role: 'user' },\n  secret: 'my-secret-key',\n});\n\nconsole.log('Signed Token:', token);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Secure Secrets:"})," Always use strong, unpredictable secrets or private keys for signing tokens."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set Expiration Times:"})," Define reasonable ",(0,t.jsx)(n.code,{children:"expiresIn"})," values to reduce the risk of token misuse."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Algorithm Consistency:"})," Ensure the algorithm matches between signing and verification."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default Options:"})," Use ",(0,t.jsx)(n.code,{children:"setDefaultSignOptions"})," to maintain consistent signing behavior across your application."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/0.1.0/tutorial-basics/token-verification",children:"Continue to: Token Verification with the Verify Method"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);